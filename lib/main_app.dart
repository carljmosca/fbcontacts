// Copyright (c) 2015, Carl J. Mosca. All rights reserved. Use of this source code
// is governed by a BSD-style license that can be found in the LICENSE file.

import 'dart:html' as html;

import 'package:polymer/polymer.dart';
import 'package:firebase/firebase.dart';

/// A Polymer `<main-app>` element.
@CustomTag('main-app')
class MainApp extends PolymerElement {
  @observable Map contactData = toObservable({
    'company': '',
    'firstName': '',
    'lastName': '',
    'address1': '',
    'address2': '',
    'city': '',
    'state': '',
    'zip': '',
    'telephone': '',
    'email': '',
    'mobile': ''    
  });

  /// Constructor used to create instance of MainApp.
  MainApp.created() : super.created();

  Firebase firebase = new Firebase("https://stillhacking.firebaseio.com/");
    
  void postContact(html.Event e, var detail, html.Element target) {
    
    firebase.authWithOAuthPopup('google');    
    
    // Generate a reference to a new location and add some data using push()
    Firebase postRef = firebase.child("contacts");
    Firebase newPostRef = postRef.push();
    
    var post1 = {
      'company': contactData['company'], 
      'firstName': contactData['firstName'], 
      'lastName': contactData['lastName']       
      };
    
    newPostRef.set(post1);

    // Get the unique ID generated by push()
    String postId = newPostRef.key;
    
  }

  // Optional lifecycle methods - uncomment if needed.

//  /// Called when an instance of main-app is inserted into the DOM.
//  attached() {
//    super.attached();
//  }

//  /// Called when an instance of main-app is removed from the DOM.
//  detached() {
//    super.detached();
//  }

//  /// Called when an attribute (such as a class) of an instance of
//  /// main-app is added, changed, or removed.
//  attributeChanged(String name, String oldValue, String newValue) {
//    super.attributeChanges(name, oldValue, newValue);
//  }

//  /// Called when main-app has been fully prepared (Shadow DOM created,
//  /// property observers set up, event listeners attached).
//  ready() {
//    super.ready();
//  }
}
