// Copyright (c) 2015, Carl J. Mosca. All rights reserved. Use of this source code
// is governed by a BSD-style license that can be found in the LICENSE file.

import 'dart:html' as html;

import 'package:polymer/polymer.dart';
import 'package:firebase/firebase.dart';
import 'package:paper_elements/paper_input.dart';
import 'package:core_elements/core_item.dart';
import 'package:core_elements/core_list_dart.dart';
import 'package:paper_elements/paper_toast.dart';

const FB_BASE_ADDRESS = "https://stillhacking.firebaseio.com";

/// A Polymer `<main-app>` element.
@CustomTag('main-app')
class MainApp extends PolymerElement {
  @observable bool authenticated = false;
  @observable int selectedPage = 0;
  @observable Map contactData = toObservable({
    'company': '',
    'firstName': '',
    'lastName': '',
    'address1': '',
    'address2': '',
    'city': '',
    'state': '',
    'zip': '',
    'telephone': '',
    'email': '',
    'mobile': ''    
  });
  
  @observable bool multi = false;
  @observable bool selectionEnabled = true;
  @observable ObservableList data;
  @observable var selection;
  int addIndex = 0;

  /// Constructor used to create instance of MainApp.
  MainApp.created() : super.created();
  
  Firebase firebase;
  PaperToast saveToast;
  CoreList coreListDart;

  void selectPage(html.Event e, var detail, html.Element target) {
   
    if (!authenticated) {
      return;
    }
    addRecord();
    CoreItem btn = target;
    if (btn.id == "btn-edit") {
      selectedPage = 1;
    } else {
      selectedPage = 0;
    }

  }

  void inputHandler(html.Event e) {
      //PaperInput paperInput = (e.target as PaperInput);
      //paperInput.
      var inp = ($['zip'] as PaperInput);
      // very simple check - you can check what you want of courxe
      if(inp.value.length < 5) {
        // any text is treated as validation error
        inp.jsElement.callMethod('setCustomValidity', ["Give me more!"]);
      } else {
        // empty message text is interpreted as valid input
        inp.jsElement.callMethod('setCustomValidity', [""]);
      }
    }
  
    
  void postContact(html.Event e, var detail, html.Element target) {
    
    if (!authenticated) {
      showMessage("Contacts cannot be saving without first logging in.");
      return;
    }

    Firebase postRef = firebase.child("contacts");
    Firebase newPostRef = postRef.push();
    
    var post1 = {
      'company': contactData['company'], 
      'firstName': contactData['firstName'], 
      'lastName': contactData['lastName'],    
      'address1': contactData['address1'], 
      'address2': contactData['address2'], 
      'city': contactData['city'],   
      'state': contactData['state'], 
      'zip': contactData['zip'], 
      'telephone': contactData['telephone'],
      'email': contactData['email'], 
      'mobile': contactData['mobile']
      };
    
    newPostRef.set(post1);

    // Get the unique ID generated by push()
    String postId = newPostRef.key;
    if (postId != null) {
      showMessage("Contact was saved");
    }
    
  }
  
  void loadContacts() {
    
    //Firebase getRef = firebase.child("contacts");
    //getRef.on
    //firebase.onV onValue(processValue);
   
  }
  
  void processValue() {
  
  }
  
  void showMessage(String text) {
    if (saveToast != null) {
      saveToast.text = text;
      saveToast.show();
    }
  }

  // Optional lifecycle methods - uncomment if needed.

//  /// Called when an instance of main-app is inserted into the DOM.
//  attached() {
//    super.attached();
//  }

//  /// Called when an instance of main-app is removed from the DOM.
//  detached() {
//    super.detached();
//  }

//  /// Called when an attribute (such as a class) of an instance of
//  /// main-app is added, changed, or removed.
//  attributeChanged(String name, String oldValue, String newValue) {
//    super.attributeChanges(name, oldValue, newValue);
//  }

  /// Called when main-app has been fully prepared (Shadow DOM created,
  /// property observers set up, event listeners attached).
  @override
  ready() {
    super.ready();
    data = new ObservableList();
    saveToast = shadowRoot.querySelector('#save-toast');
    coreListDart = shadowRoot.querySelector('#list');
    firebase = new Firebase(FB_BASE_ADDRESS);
    firebase.authWithOAuthPopup('google').then((_) {        
      authenticated = true;
      showMessage("Authenticated");
    });
    addRecord();
    addRecord();
  }
  
  void addRecord() {
    if (data == null) {
      return;
    }
//    Contact contact = new Contact(addIndex, "ABC Company", "Carl", "Mosca",
//        "123 Main Street", "Box 12", "Henrico", "VA", "23233", "123-456-7890", "here@there.com", "999-888-0101");
    data.insert(addIndex, new Contact(addIndex, "ABC Company", "Carl", "Mosca",
        "123 Main Street", "Box 12", "Henrico", "VA", "23233", "123-456-7890", "here@there.com", "999-888-0101", 0, 0, addIndex));  
    addIndex = addIndex + 1;
  }
  
}

class Contact extends Observable {
  final int id;
  @observable String company;
  @observable String firstName;
  @observable String lastName;
  @observable String address1;
  @observable String address2;
  @observable String city;
  @observable String state;
  @observable String zip;
  @observable String telephone;
  @observable String email;
  @observable String mobile;
  @observable int value;
  @observable int type;
  @observable bool checked;
  @observable int index;
  
  Contact(this.id, this.company, this.firstName, this.lastName,
      this.address1, this.address2, this.city, this.state, this.zip, this.telephone,
      this.email, this.mobile, this.type, this.value, this.index) {

  }
}

main() => initPolymer();