// Copyright (c) 2015, Carl J. Mosca. All rights reserved. Use of this source code
// is governed by a BSD-style license that can be found in the LICENSE file.

import 'dart:html' as html;

import 'package:polymer/polymer.dart';
import 'package:firebase/firebase.dart';
import 'package:paper_elements/paper_input.dart';
import 'package:core_elements/core_item.dart';
import 'package:paper_elements/paper_toast.dart';

const FB_BASE_ADDRESS = "https://stillhacking.firebaseio.com";

/// A Polymer `<main-app>` element.
@CustomTag('main-app')
class MainApp extends PolymerElement {
  @observable bool authenticated = false;
  @observable int selected = 0;
  @observable Map contactData = toObservable({
    'company': '',
    'firstName': '',
    'lastName': '',
    'address1': '',
    'address2': '',
    'city': '',
    'state': '',
    'zip': '',
    'telephone': '',
    'email': '',
    'mobile': ''    
  });

  /// Constructor used to create instance of MainApp.
  MainApp.created() : super.created();

  Firebase firebase;
  PaperToast saveToast;

  void selectTab(html.Event e, var detail, html.Element target) {
   
    if (!authenticated) {
      return;
    }
    CoreItem btn = target;
    if (btn.id == "btn-edit") {
      selected = 1;
    } else {
      selected = 0;
    }

  }

  void inputHandler(html.Event e) {
      //PaperInput paperInput = (e.target as PaperInput);
      //paperInput.
      var inp = ($['zip'] as PaperInput);
      // very simple check - you can check what you want of courxe
      if(inp.value.length < 5) {
        // any text is treated as validation error
        inp.jsElement.callMethod('setCustomValidity', ["Give me more!"]);
      } else {
        // empty message text is interpreted as valid input
        inp.jsElement.callMethod('setCustomValidity', [""]);
      }
    }
  
    
  void postContact(html.Event e, var detail, html.Element target) {
    
    if (!authenticated) {
      showMessage("Contacts cannot be saving without first logging in.");
      return;
    }

    Firebase postRef = firebase.child("contacts");
    Firebase newPostRef = postRef.push();
    
    var post1 = {
      'company': contactData['company'], 
      'firstName': contactData['firstName'], 
      'lastName': contactData['lastName'],    
      'address1': contactData['address1'], 
      'address2': contactData['address2'], 
      'city': contactData['city'],   
      'state': contactData['state'], 
      'zip': contactData['zip'], 
      'telephone': contactData['telephone'],
      'email': contactData['email'], 
      'mobile': contactData['mobile']
      };
    
    newPostRef.set(post1);

    // Get the unique ID generated by push()
    String postId = newPostRef.key;
    if (postId != null) {
      showMessage("Contact was saved");
    }
    
  }
  
  void loadContacts() {
    
    Firebase getRef = firebase.child("contacts");
    //getRef.on
    //firebase.onV onValue(processValue);
   
  }
  
  void processValue() {
  
  }
  
  void showMessage(String text) {
    if (saveToast != null) {
      saveToast.text = text;
      saveToast.show();
    }
  }

  // Optional lifecycle methods - uncomment if needed.

//  /// Called when an instance of main-app is inserted into the DOM.
//  attached() {
//    super.attached();
//  }

//  /// Called when an instance of main-app is removed from the DOM.
//  detached() {
//    super.detached();
//  }

//  /// Called when an attribute (such as a class) of an instance of
//  /// main-app is added, changed, or removed.
//  attributeChanged(String name, String oldValue, String newValue) {
//    super.attributeChanges(name, oldValue, newValue);
//  }

  /// Called when main-app has been fully prepared (Shadow DOM created,
  /// property observers set up, event listeners attached).
  ready() {
    super.ready();
    saveToast = shadowRoot.querySelector('#save-toast');
    firebase = new Firebase(FB_BASE_ADDRESS);
    firebase.authWithOAuthPopup('google').then((_) {        
      authenticated = true;   
    });
  }
}
